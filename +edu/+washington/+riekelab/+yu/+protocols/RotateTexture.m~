classdef RotateTexture < edu.washington.riekelab.protocols.RiekeLabStageProtocol
    %ROTATE texture in the receptive field center
    %to fix -> scene size 
    
    properties
        preTime = 200 % ms
        stimTime = 200 % ms
        tailTime = 200 % ms
        centerSigma = 60 %texture space
        displayMode = 'flash';
        angularInterval = 30 %[0 - 180], speed if select continuous;
        apertureDiameter = 200 % um
        background = 0.2
        contrast = 1 %[0 1]
        centerOffset = [0, 0] % [x,y] (um)
        onlineAnalysis = 'none'
        numberOfAverages = uint16(4) % number of epochs to queue
        amp % Output amplifier
    end
    
     properties (Hidden)
        ampType
        searchModeType = symphonyui.core.PropertyType('char','row',{'On','Off'})
        displayModeType = symphonyui.core.PropertyType('char','row',{'flash','continuous'})
        onlineAnalysisType = symphonyui.core.PropertyType('char', 'row', {'none', 'extracellular', 'exc', 'inh'})
        centerOffsetType = symphonyui.core.PropertyType('denserealdouble', 'matrix')
        centerSeed
        centerTexture
        currentTextureMatrix
        rotation
     end
    
    methods
        
        function didSetRig(obj)
            didSetRig@edu.washington.riekelab.protocols.RiekeLabStageProtocol(obj);
            [obj.amp, obj.ampType] = obj.createDeviceNamesProperty('Amp');
        end

        function prepareRun(obj)
            prepareRun@edu.washington.riekelab.protocols.RiekeLabStageProtocol(obj);
            
            obj.showFigure('symphonyui.builtin.figures.ResponseFigure', obj.rig.getDevice(obj.amp));
            obj.showFigure('edu.washington.riekelab.turner.figures.MeanResponseFigure',...
                obj.rig.getDevice(obj.amp),'recordingType',obj.onlineAnalysis,...
                'groupBy',{'stimulusTag'});
            obj.showFigure('edu.washington.riekelab.turner.figures.FrameTimingFigure',...
                obj.rig.getDevice('Stage'), obj.rig.getDevice('Frame Monitor'));
            if ~strcmp(obj.onlineAnalysis,'none')
                obj.showFigure('edu.washington.riekelab.turner.figures.ImageVsIntensityFigure',...
                obj.rig.getDevice(obj.amp),'recordingType',obj.onlineAnalysis,...
                'preTime',obj.preTime,'stimTime',obj.stimTime);
            end
            
            %size of the stimulus on the prep:
            stimSize = obj.rig.getDevice('Stage').getCanvasSize() .* ...
                obj.rig.getDevice('Stage').getConfigurationSetting('micronsPerPixel'); %um
            stimSize_VHpix = stimSize ./ (3.3); %um / (um/pixel) -> pixel
            radX = round(stimSize_VHpix(1) / 2); %boundaries for fixation draws depend on stimulus size
            radY = round(stimSize_VHpix(2) / 2);
            % make properiate texture input
            sigmaPix =  obj.rig.getDevice('Stage').um2pix(obj.centerSigma);
            obj.currentSeed = RandStream.shuffleSeed;
            obj.centerTexture = edu.washington.riekelab.yu.utils.makeRecTextureMatrix([radX, radY],...
                    sigmaPix, obj.currentSeed, obj.background, obj.contrast);
            obj.centerTexture = uint8(obj.centerTexture .* 255)';
        end
        
        function prepareEpoch(obj, epoch)
            prepareEpoch@edu.washington.riekelab.protocols.RiekeLabStageProtocol(obj, epoch);

            if strcmp(obj.displayMode,'flash')
                obj.rotation = mod((obj.numEpochsCompleted+1)*obj.angularInterval,360);
                obj.currentTextureMatrix = imrotate(obj.centerTexture, obj.rotation, 'bilinear', 'crop');
            end
            
            device = obj.rig.getDevice(obj.amp);
            duration = (obj.preTime + obj.stimTime + obj.tailTime) / 1e3;
            epoch.addDirectCurrentStimulus(device, device.background, duration, obj.sampleRate);
            epoch.addResponse(device);
            epoch.addParameter('rotation', obj.rotation);
            epoch.addParameter('centerSeed',obj.centerSeed);
        end
        
        function p = createPresentation(obj)
            canvasSize = obj.rig.getDevice('Stage').getCanvasSize();
            apertureDiameterPix = obj.rig.getDevice('Stage').um2pix(obj.apertureDiameter);
            centerOffsetPix = obj.rig.getDevice('Stage').um2pix(obj.centerOffset);
             
            if strcmp(obj.displayMode,'flash')
               p = stage.core.Presentation((obj.preTime + obj.stimTime + obj.tailTime) * 1e-3);
               p.setBackgroundColor(obj.backgroundIntensity);
               scene = stage.builtin.stimuli.Image(obj.currentTextureMatrix);
               scene.size = canvasSize; %scale up to canvas size
               scene.position = canvasSize/2 + centerOffsetPix;
                % Use linear interpolation when scaling the image.
               scene.setMinFunction(GL.LINEAR);
               scene.setMagFunction(GL.LINEAR);
               p.addStimulus(scene);
               sceneVisible = stage.builtin.controllers.PropertyController(scene, 'visible', ...
                    @(state)state.time >= obj.preTime * 1e-3 && state.time < (obj.preTime + obj.stimTime) * 1e-3);
               p.addController(sceneVisible);
           
            elseif strcmp(obj.displayMode,'continuous')
                angular_vel = obj.angularInterval/(obj.preTime+obj.stimTime+obj.tailtime)*1e3; % degree/s
                total_stimtime = 360/angular_vel*1e3;
                p = stage.core.Presentation((obj.preTime + total_stimtime + obj.tailTime) * 1e-3);
                scene=stage.builtin.stimuli.Image(obj.centerTexture);
                scene.size = canvasSize;
                scene.position = canvasSize/2+centerOffsetPix;
                
            end
            if (obj.apertureDiameter > 0) %% Create aperture
               aperture = stage.builtin.stimuli.Rectangle();
               aperture.position = canvasSize/2 + centerOffsetPix;
               aperture.color = obj.background;
               aperture.size = [max(canvasSize) max(canvasSize)];
               mask = stage.core.Mask.createCircularAperture(apertureDiameterPix/max(canvasSize), 1024); %circular aperture
               %display(apertureDiameterPix/max(canvasSize));
               aperture.setMask(mask);
               p.addStimulus(aperture); %add aperture
            end
        end
        
        function tf = shouldContinuePreparingEpochs(obj)
            tf = obj.numEpochsPrepared < obj.numberOfAverages;
        end
        
        function tf = shouldContinueRun(obj)
            tf = obj.numEpochsCompleted < obj.numberOfAverages;
        end
    end
    
end

